
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Hannah
 */
public class NewWindow extends javax.swing.JFrame {

    /**
     * Creates new form NewWindow
     */
    private Model model;
    private int currentTeamId;
    private ArrayList<Integer> teamL;
    private ArrayList<Integer> teamL2;
    private int thisKey;
    public ArrayList<Integer> league1strengh;
    public ArrayList<Integer> league2strengh;
    public ArrayList<Integer> league3strengh;
    public ArrayList<Integer> league4strengh;
    public double league1str;
    public double league2str;
    public double league3str;
    public double league4str;
    public String fileName;
    
    public NewWindow() {
        model = new Model();
        initComponents();
        importData("TeamList.csv");
        saveMButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addTeamW = new javax.swing.JDialog();
        teamNameLW = new javax.swing.JLabel();
        teamNumLW = new javax.swing.JLabel();
        schoolLW = new javax.swing.JLabel();
        strengthLW = new javax.swing.JLabel();
        teamNameW = new javax.swing.JTextField();
        teamNumW = new javax.swing.JTextField();
        schoolW = new javax.swing.JTextField();
        strengthW = new javax.swing.JTextField();
        addW = new javax.swing.JButton();
        cancelW = new javax.swing.JButton();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel2 = new StrengthPanel();
        teamNumL = new javax.swing.JLabel();
        teamNameL = new javax.swing.JLabel();
        schoolL = new javax.swing.JLabel();
        doubleBackB = new javax.swing.JButton();
        backB = new javax.swing.JButton();
        frontB = new javax.swing.JButton();
        doubleFrontB = new javax.swing.JButton();
        teamNum_jText = new javax.swing.JTextField();
        teamName = new javax.swing.JTextField();
        school = new javax.swing.JTextField();
        strengthL = new javax.swing.JLabel();
        leagueL = new javax.swing.JLabel();
        strength = new javax.swing.JTextField();
        league = new javax.swing.JTextField();
        shuffleB = new javax.swing.JButton();
        addB = new javax.swing.JButton();
        saveB = new javax.swing.JButton();
        deleteB = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        newMButton = new javax.swing.JMenuItem();
        openMButton = new javax.swing.JMenuItem();
        saveMButton = new javax.swing.JMenuItem();
        saveAsMButton = new javax.swing.JMenuItem();
        importMButton = new javax.swing.JMenuItem();
        closeMButton = new javax.swing.JMenuItem();

        addTeamW.setMinimumSize(new java.awt.Dimension(327, 290));
        addTeamW.setModal(true);
        addTeamW.setResizable(false);

        teamNameLW.setText("TEAM NAME");

        teamNumLW.setText("TEAM #");

        schoolLW.setText("SCHOOL");

        strengthLW.setText("STRENGTH");

        teamNameW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamNameWActionPerformed(evt);
            }
        });

        schoolW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schoolWActionPerformed(evt);
            }
        });

        addW.setText("ADD");
        addW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWActionPerformed(evt);
            }
        });

        cancelW.setText("CANCEL");
        cancelW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelWActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addTeamWLayout = new javax.swing.GroupLayout(addTeamW.getContentPane());
        addTeamW.getContentPane().setLayout(addTeamWLayout);
        addTeamWLayout.setHorizontalGroup(
            addTeamWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTeamWLayout.createSequentialGroup()
                .addGroup(addTeamWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addTeamWLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addW)
                        .addGap(69, 69, 69)
                        .addComponent(cancelW))
                    .addGroup(addTeamWLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(addTeamWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(strengthLW)
                            .addComponent(schoolLW)
                            .addComponent(teamNumLW)
                            .addComponent(teamNameLW))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addGroup(addTeamWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(teamNameW, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(teamNumW, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(schoolW, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(strengthW, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        addTeamWLayout.setVerticalGroup(
            addTeamWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTeamWLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(addTeamWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamNameLW)
                    .addComponent(teamNameW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(addTeamWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamNumLW)
                    .addComponent(teamNumW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addTeamWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schoolLW)
                    .addComponent(schoolW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addTeamWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(strengthLW)
                    .addComponent(strengthW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addTeamWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addW)
                    .addComponent(cancelW))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "L1", "L2", "L3", "L4"
            }
        ));
        table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tableFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                tableFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        teamNumL.setText("TEAM #");

        teamNameL.setText("TEAM NAME");

        schoolL.setText("SCHOOL");

        doubleBackB.setText("<<");
        doubleBackB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleBackBActionPerformed(evt);
            }
        });

        backB.setText("<");
        backB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBActionPerformed(evt);
            }
        });

        frontB.setText(">");
        frontB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frontBActionPerformed(evt);
            }
        });

        doubleFrontB.setText(">>");
        doubleFrontB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleFrontBActionPerformed(evt);
            }
        });

        teamNum_jText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                teamNum_jTextFocusGained(evt);
            }
        });
        teamNum_jText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamNum_jTextActionPerformed(evt);
            }
        });

        teamName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                teamNameFocusGained(evt);
            }
        });
        teamName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamNameActionPerformed(evt);
            }
        });

        school.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                schoolFocusGained(evt);
            }
        });

        strengthL.setText("STRENGTH");

        leagueL.setText("LEAGUE");

        strength.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                strengthFocusGained(evt);
            }
        });
        strength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strengthActionPerformed(evt);
            }
        });

        league.setFocusable(false);
        league.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                leagueFocusGained(evt);
            }
        });
        league.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leagueActionPerformed(evt);
            }
        });

        shuffleB.setText("SHUFFLE");
        shuffleB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleBActionPerformed(evt);
            }
        });

        addB.setText("ADD");
        addB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBActionPerformed(evt);
            }
        });

        saveB.setText("SAVE");
        saveB.setEnabled(false);
        saveB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBActionPerformed(evt);
            }
        });

        deleteB.setText("DELETE");
        deleteB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBActionPerformed(evt);
            }
        });

        menu.setText("File");
        menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuActionPerformed(evt);
            }
        });

        newMButton.setText("New");
        newMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMButtonActionPerformed(evt);
            }
        });
        menu.add(newMButton);

        openMButton.setText("Open");
        openMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMButtonActionPerformed(evt);
            }
        });
        menu.add(openMButton);

        saveMButton.setText("Save");
        saveMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMButtonActionPerformed(evt);
            }
        });
        menu.add(saveMButton);

        saveAsMButton.setText("Save As");
        saveAsMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMButtonActionPerformed(evt);
            }
        });
        menu.add(saveAsMButton);

        importMButton.setText("Import");
        importMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importMButtonActionPerformed(evt);
            }
        });
        menu.add(importMButton);

        closeMButton.setText("Close");
        closeMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMButtonActionPerformed(evt);
            }
        });
        menu.add(closeMButton);

        menuBar.add(menu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(teamNameL)
                            .addComponent(schoolL)
                            .addComponent(teamNumL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(teamNum_jText, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                            .addComponent(teamName)
                            .addComponent(school))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(strengthL)
                            .addComponent(leagueL))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(strength, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                            .addComponent(league))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deleteB, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                            .addComponent(addB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(shuffleB)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 175, Short.MAX_VALUE)
                .addComponent(doubleBackB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(frontB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(doubleFrontB)
                .addGap(173, 173, 173))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(teamNumL)
                                    .addComponent(teamNum_jText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(shuffleB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addB))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(strengthL)
                        .addComponent(strength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamNameL)
                    .addComponent(teamName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leagueL)
                    .addComponent(league, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(school, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(schoolL))
                    .addComponent(saveB))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doubleBackB)
                    .addComponent(backB)
                    .addComponent(frontB)
                    .addComponent(doubleFrontB))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMButtonActionPerformed

           fileSave();
    }//GEN-LAST:event_saveMButtonActionPerformed

    private void closeMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMButtonActionPerformed
        // TODO add your handling code here:
        FileOutputStream fos = null;
        try {
            // TODO add your handling code here:
            File file = new File("data.ftc");
            fos = new FileOutputStream(file);
            try (ObjectOutputStream oos = new ObjectOutputStream(fos)) {
                oos.writeObject(model);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fos.close();
            } catch (IOException ex) {
                Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.exit(0);
    }//GEN-LAST:event_closeMButtonActionPerformed

    private void newMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMButtonActionPerformed
        // TODO add your handling code here:
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to create a new file (start over)?");
        
        if (confirm != 0) return;
        
        addB.setEnabled(true);
        saveB.setEnabled(false);
        deleteB.setEnabled(false);
        shuffleB.setEnabled(false);
        doubleBackB.setEnabled(false);
        doubleFrontB.setEnabled(false);
        frontB.setEnabled(false);
        backB.setEnabled(false);
        
        for(int i = 0; i < teamL2.size(); i++){
        deleteBActionPerformed(evt);
        
    }
        for(int i = 0; i < 13; i++){
            table.setValueAt(null, i, 0);
        }
        for(int i = 0; i < 13; i++){
            table.setValueAt(null, i, 1);
        }
        for(int i = 0; i < 13; i++){
            table.setValueAt(null, i, 2);
        }
        for(int i = 0; i < 13; i++){
            table.setValueAt(null, i, 3);
        }
        
        
        ((StrengthPanel)jPanel2).updateLeaguePanel(model.getLeagues(), 0, 0, 0, 0);
        fileName = null;
        // Integer key = model.getTeams().lastKey();
        //updateTeamFields(key);

    }//GEN-LAST:event_newMButtonActionPerformed

    private void saveAsMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser();
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
           FileOutputStream fos = null;
        try {
            // TODO add your handling code here:
            File file = jfc.getSelectedFile();
            fos = new FileOutputStream(file);
            fileName = file.toString();
            try (ObjectOutputStream oos = new ObjectOutputStream(fos)) {
                oos.writeObject(model);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fos.close();
            } catch (IOException ex) {
                Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        }
        saveMButton.setEnabled(true);
       
    }//GEN-LAST:event_saveAsMButtonActionPerformed

    private void shuffleBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleBActionPerformed
        // TODO add your handling code here:
        ArrayList<Integer> league1 = new ArrayList();
        ArrayList<Integer> league2 = new ArrayList();
        ArrayList<Integer> league3 = new ArrayList();
        ArrayList<Integer> league4 = new ArrayList();
        
        
        Set keySet = model.getTeams().keySet();
        teamL = new ArrayList(keySet);
        league1strengh = new ArrayList();
        league2strengh = new ArrayList();
        league3strengh = new ArrayList();
        league4strengh = new ArrayList();
        
        Random generator = new Random();
        //to get random number from a list
        //generator.nextInt(list.size())
        int maxSize = ((teamL.size() / 4));
        int index = generator.nextInt(maxSize);
        int remainder = teamL.size() % 4;
        int m1 = remainder >= 1 ? maxSize + 1 : maxSize;
        int m2 = remainder >= 2 ? maxSize + 1 : maxSize;
        int m3 = remainder >= 3 ? maxSize + 1 : maxSize;
        int m4 =  maxSize;
        int c = 0;
        String school = "";
        
        setLeague(league1, league1strengh, m1, 1);
        setLeague(league2, league2strengh, m2, 2);
        setLeague(league3, league3strengh, m3, 3);
        setLeague(league4, league4strengh, m4, 4);
        
        updateTeamFields(league1.get(0));
        
        setTable(league1, 0);
        setTable(league2, 1);
        setTable(league3, 2);
        setTable(league4, 3);
        
        league1str = getLeagueStrength(league1strengh);
        league2str = getLeagueStrength(league2strengh);
        league3str = getLeagueStrength(league3strengh);
        league4str = getLeagueStrength(league4strengh);
       
        
        ((StrengthPanel)jPanel2).updateLeaguePanel(model.getLeagues(), league1str, league2str, league3str, league4str);
        
    }//GEN-LAST:event_shuffleBActionPerformed

    private void saveBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBActionPerformed
        // TODO add your handling code here:
         int id = 0;
         int curkey = id;
         try{
             id = new Integer(teamNum_jText.getText());
         } catch (Exception e){
             JOptionPane.showMessageDialog(this, "ERROR: Team Number must contain valid integer.");
             return;
         }
          
         String name = teamName.getText();
         if(name.equals("")){
             JOptionPane.showMessageDialog(this, "ERROR: Team Name must contain text.");
             return;
         }
         
         
         String schooll = school.getText();
         if(schooll.equals("")){
            JOptionPane.showMessageDialog(this, "ERROR: School must contain text.");
            return; 
         }
         
         int lEague = new Integer(league.getText());
        int sTrength;
         try{
             sTrength = new Integer(strength.getText());
         } catch (Exception e){
             JOptionPane.showMessageDialog(this, "ERROR: Strength must contain valid integer.");
             return;
         }
         if (sTrength >= 5 || sTrength < 0) {
            JOptionPane.showMessageDialog(this, "ERROR: Strength value must be between 0 and 4.");
            return; 
         }
          
         Team team = new Team(id, name, schooll, sTrength);
         if(!model.getTeams().containsKey(curkey)){
         model.getTeams().put(id, team);
         model.getTeams().remove(thisKey);
         saveB.setEnabled(false);
         }
         else{
                 model.getTeams().put(id, team);
                 saveB.setEnabled(false);
                 }
        doubleBackB.setEnabled(true);
        doubleFrontB.setEnabled(true);
        frontB.setEnabled(true);
        backB.setEnabled(true);
    }//GEN-LAST:event_saveBActionPerformed

    private void doubleBackBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleBackBActionPerformed
        // TODO add your handling code here:
        Integer key = model.getTeams().firstKey();
        updateTeamFields(key);
    }//GEN-LAST:event_doubleBackBActionPerformed

    private void importMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importMButtonActionPerformed

            // TODO add your handling code here (school, id, name, strength)
            //importData("TeamList.csv");
        JFileChooser jfc = new JFileChooser();
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
           FileInputStream fis = null;
            // TODO add your handling code here:
            File file = jfc.getSelectedFile();
               try {
                   fis = new FileInputStream(file);
               } catch (FileNotFoundException ex) {
                   Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
               }
            importData(file.getName());
            try (ObjectInputStream ois = new ObjectInputStream(fis)) {
                try {
                    model = (Model) ois.readObject();
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                ois.close();
            }catch (Exception e){
                        
                        }
        }
        Integer key = model.getTeams().lastKey();
        updateTeamFields(key);
    }//GEN-LAST:event_importMButtonActionPerformed

    private void leagueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leagueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_leagueActionPerformed

    private void backBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBActionPerformed
        // TODO add your handling code here:
        String teamNum = teamNum_jText.getText();
        Integer curKey = new Integer(teamNum);
        Integer key = model.getTeams().lowerKey(curKey);
        if(key == null){
            return;
        }
        updateTeamFields(key);
    }//GEN-LAST:event_backBActionPerformed

    private void doubleFrontBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleFrontBActionPerformed
        // TODO add your handling code here:
        Integer key = model.getTeams().lastKey();
        updateTeamFields(key);
    }//GEN-LAST:event_doubleFrontBActionPerformed

    private void frontBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frontBActionPerformed
        // TODO add your handling code here:
        String teamNum = teamNum_jText.getText();
        Integer curKey = new Integer(teamNum);
        Integer key = model.getTeams().higherKey(curKey);
        if (key == null){
            return;
        }
        updateTeamFields(key);
    }//GEN-LAST:event_frontBActionPerformed

    private void deleteBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBActionPerformed
        // TODO add your handling code here)
        try{
            if(model.getTeams() == null){
                return;
            }
        
        String teamNum = teamNum_jText.getText();
        Integer curKey = new Integer(teamNum);
        
        if(!saveB.isEnabled() && !deleteB.isEnabled() && !shuffleB.isEnabled()){
        model.getTeams().remove(curKey);
        Integer key = model.getTeams().higherKey(curKey);
        if(key == null){
            key = model.getTeams().lowerKey(curKey);
        }
        updateTeamFields(key);
        }
        
        else{
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete?");
        
        if (confirm != 0) return;
        Integer key = model.getTeams().higherKey(curKey);
        model.getTeams().remove(curKey);
        if(key == null){
            key = model.getTeams().lowerKey(curKey);
        }
        updateTeamFields(key);
        }
        }catch (Exception e){
            school.setText("");
            teamNum_jText.setText("");
            teamName.setText("");
            strength.setText("");
            league.setText("");
            
        addB.setEnabled(true);
        saveB.setEnabled(false);
        deleteB.setEnabled(false);
        shuffleB.setEnabled(false);
        doubleBackB.setEnabled(false);
        doubleFrontB.setEnabled(false);
        frontB.setEnabled(false);
        backB.setEnabled(false);
                }
        
    }//GEN-LAST:event_deleteBActionPerformed

    private void teamNum_jTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_teamNum_jTextFocusGained
        // TODO add your handling code here
        saveB.setEnabled(true);
        doubleBackB.setEnabled(false);
        doubleFrontB.setEnabled(false);
        frontB.setEnabled(false);
        backB.setEnabled(false);
    }//GEN-LAST:event_teamNum_jTextFocusGained

    private void teamNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_teamNameFocusGained
        // TODO add your handling code here:
        saveB.setEnabled(true);
        doubleBackB.setEnabled(false);
        doubleFrontB.setEnabled(false);
        frontB.setEnabled(false);
        backB.setEnabled(false);
    }//GEN-LAST:event_teamNameFocusGained

    private void schoolFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_schoolFocusGained
        // TODO add your handling code here:
        saveB.setEnabled(true);
        doubleBackB.setEnabled(false);
        doubleFrontB.setEnabled(false);
        frontB.setEnabled(false);
        backB.setEnabled(false);
    }//GEN-LAST:event_schoolFocusGained

    private void strengthFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_strengthFocusGained
        // TODO add your handling code here:
        saveB.setEnabled(true);
        doubleBackB.setEnabled(false);
        doubleFrontB.setEnabled(false);
        frontB.setEnabled(false);
        backB.setEnabled(false);
    }//GEN-LAST:event_strengthFocusGained

    private void leagueFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_leagueFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_leagueFocusGained

    private void strengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strengthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_strengthActionPerformed

    private void addBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBActionPerformed
        // TODO add your handling code here:
        saveB.setEnabled(true);
        doubleBackB.setEnabled(true);
        doubleFrontB.setEnabled(true);
        frontB.setEnabled(true);
        backB.setEnabled(true);
        addTeamW.setVisible(true);
    }//GEN-LAST:event_addBActionPerformed

    private void teamNameWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamNameWActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_teamNameWActionPerformed

    private void schoolWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schoolWActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_schoolWActionPerformed

    private void addWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWActionPerformed
        // TODO add your handling code here:
        int ido = 0;
        try{
            ido = new Integer(teamNumW.getText());
            } catch (Exception e){
                JOptionPane.showMessageDialog(this, "ERROR: Team Number must contain valid integer.");
                return;
            }
        
        try{
            ido = new Integer(strengthW.getText());
            } catch (Exception e){
                 JOptionPane.showMessageDialog(this, "ERROR: Team Number must contain valid integer.");
                    return;
                }
            
        String school = schoolW.getText();
        if(school.equals("")){
            JOptionPane.showMessageDialog(this, "ERROR: School must contain text.");
            return; 
         }
            
        Integer id = (new Integer(teamNumW.getText()));
        if(model.getTeams().containsKey(id)){
            JOptionPane.showMessageDialog(this, "ERROR: Team number already exists.");
            return; 
        }
        
        String name = teamNameW.getText();
        if(name.equals("")){
            JOptionPane.showMessageDialog(this, "ERROR: Team name must contain text.");
            return; 
         }
        
        int strength = (new Integer(strengthW.getText()));
        if(strength > 4 || strength < 0){
            JOptionPane.showMessageDialog(this, "ERROR: Strength must be between 0-4.");
            return; 
        }
            
            
            
            Team team = new Team(id, name, school, strength);
            model.getTeams().put(id, team);
            addTeamW.setVisible(false);
            schoolW.setText("");
            teamNumW.setText("");
            teamNameW.setText("");
            strengthW.setText("");
            updateTeamFields(id);
    }//GEN-LAST:event_addWActionPerformed

    private void cancelWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelWActionPerformed
        // TODO add your handling code here:
        addTeamW.setVisible(false);
            schoolW.setText("");
            teamNumW.setText("");
            teamNameW.setText("");
            strengthW.setText("");
    }//GEN-LAST:event_cancelWActionPerformed

    private void openMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMButtonActionPerformed
        // TODO add your handling code here:
         JFileChooser jfc = new JFileChooser();
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
           FileInputStream fis = null;
        try {
            // TODO add your handling code here:
            File file = jfc.getSelectedFile();
            fis = new FileInputStream(file);
            try (ObjectInputStream ois = new ObjectInputStream(fis)) {
                model = (Model) ois.readObject();
                ois.close();
            }  catch (ClassNotFoundException ex) {
                   Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
               }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
               try {
                   fis.close();
               } catch (IOException ex) {
                   Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
               }
        } 
        }    
        
        for(int i = 0; i < 13; i++){
            table.setValueAt(null, i, 0);
        }
        for(int i = 0; i < 13; i++){
            table.setValueAt(null, i, 1);
        }
        for(int i = 0; i < 13; i++){
            table.setValueAt(null, i, 2);
        }
        for(int i = 0; i < 13; i++){
            table.setValueAt(null, i, 3);
        }
        
        
        ((StrengthPanel)jPanel2).updateLeaguePanel(model.getLeagues(), 0, 0, 0, 0);
        
        //set the team to the first team in the teams list
        //populate the table
         Integer key = model.getTeams().lastKey();
        updateTeamFields(key);
        addB.setEnabled(true);
        saveB.setEnabled(false);
        deleteB.setEnabled(true);
        shuffleB.setEnabled(true);
        doubleBackB.setEnabled(true);
        doubleFrontB.setEnabled(true);
        frontB.setEnabled(true);
        backB.setEnabled(true);
    }//GEN-LAST:event_openMButtonActionPerformed

    private void teamNum_jTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamNum_jTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_teamNum_jTextActionPerformed

    private void tableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableFocusGained
        // TODO add your handling code here:
        //fix exception!!!!
try{
        int r = table.getSelectedRow();
        int c = table.getSelectedColumn();
        int t = (int) table.getValueAt(r, c);
        updateTeamFields(t);}
catch(Exception e){
    
}
        table.setFocusable(false);
    }//GEN-LAST:event_tableFocusGained

    private void tableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableFocusLost
        // TODO add your handling code here:
        table.setFocusable(true);
    }//GEN-LAST:event_tableFocusLost

    private void teamNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_teamNameActionPerformed

    private void menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        fileSave();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addB;
    private javax.swing.JDialog addTeamW;
    private javax.swing.JButton addW;
    private javax.swing.JButton backB;
    private javax.swing.JButton cancelW;
    private javax.swing.JMenuItem closeMButton;
    private javax.swing.JButton deleteB;
    private javax.swing.JButton doubleBackB;
    private javax.swing.JButton doubleFrontB;
    private javax.swing.JButton frontB;
    private javax.swing.JMenuItem importMButton;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField league;
    private javax.swing.JLabel leagueL;
    private javax.swing.JMenu menu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMButton;
    private javax.swing.JMenuItem openMButton;
    private javax.swing.JMenuItem saveAsMButton;
    private javax.swing.JButton saveB;
    private javax.swing.JMenuItem saveMButton;
    private javax.swing.JTextField school;
    private javax.swing.JLabel schoolL;
    private javax.swing.JLabel schoolLW;
    private javax.swing.JTextField schoolW;
    private javax.swing.JButton shuffleB;
    private javax.swing.JTextField strength;
    private javax.swing.JLabel strengthL;
    private javax.swing.JLabel strengthLW;
    private javax.swing.JTextField strengthW;
    private javax.swing.JTable table;
    private javax.swing.JTextField teamName;
    private javax.swing.JLabel teamNameL;
    private javax.swing.JLabel teamNameLW;
    private javax.swing.JTextField teamNameW;
    private javax.swing.JLabel teamNumL;
    private javax.swing.JLabel teamNumLW;
    private javax.swing.JTextField teamNumW;
    private javax.swing.JTextField teamNum_jText;
    // End of variables declaration//GEN-END:variables

    private void importData(String fileName){
        
        Scanner data;
        
        try{
        data = new Scanner(new File(fileName));
        } catch (FileNotFoundException ex){
            System.out.println("ERROR: " + ex.toString());
            return;
        }
        
        //Read through each line and capture the data
        while(data.hasNextLine()){
            String line = data.nextLine();
            Scanner choppa = new Scanner(line);
            choppa.useDelimiter(",");
            
            //reads in each value on the line and create a team
            String school = choppa.next();
            int id = choppa.nextInt();
            String name = choppa.next();
            int strength = choppa.nextInt();
            
            Team team = new Team(id, name, school, strength);
            model.getTeams().put(id, team);
        }
        System.out.println(model.getTeams());
        
        //Populate the team fields with the first value in the map
        Integer key = model.getTeams().firstKey();
        updateTeamFields(key);
        teamL2 = new ArrayList(model.getTeams().keySet());
    }
    private void updateTeamFields(Integer key){
        Team team = model.getTeams().get(key);
        
        teamNum_jText.setText(""+team.getId());
        teamName.setText(""+team.getName());
        school.setText(""+team.getSchool());
        strength.setText(""+team.getStrength());
        league.setText(""+team.getLeague());
        
        currentTeamId = team.getId();
        thisKey = key;
    }
    private void setLeague(ArrayList<Integer> league, ArrayList<Integer> strength, int maxSize, int leag){
        Random generator = new Random();
        int teamNumber = 0;
        int countSchool = 0;
        int ind = 0;
        int str = 0;
        String school = "";
         
        for (int i = 0; i < maxSize; i++){
            ind = generator.nextInt(teamL.size());
            int o = teamL.get(ind);
            school = model.getTeams().get(o).getSchool();
            str = model.getTeams().get(o).getStrength();
            if(league.size() > 0){
            for(int v : league){
                if(school.equals(model.getTeams().get(v).getSchool())){
                    countSchool++;
                }
            }
            }
            if(countSchool >= 3){
                ind = generator.nextInt(teamL.size());
                o = teamL.get(ind);
                str = model.getTeams().get(o).getStrength();
                while(school.equals(model.getTeams().get(teamL.get(ind)).getSchool())){
                    ind = generator.nextInt(teamL.size());
                }
            }
            else{
                countSchool = 0;
            }
            strength.add(str);
            league.add(teamL.get(ind));
            model.getTeams().get(o).setLeague(leag);
            teamL.remove(ind);
        }
    }
    
    public void setTable(ArrayList<Integer> league, int col){
        int i = 0;
        for(int f: league){
            table.setValueAt(f, i, col);
            i++;
        }
    }
    public double getLeagueStrength(ArrayList<Integer> strength){
        double str = 0.0;
        for(int i : strength){
            str += (double)i;
        }
        str = str / strength.size();
        return str;
}
    public void fileSave(){
        if(fileName != null){
FileOutputStream fos = null;
        try {
            // TODO add your handling code here:
            File file = new File(fileName);
            if(fileName == null){
                fileName = "default.ftc";
            }
            fos = new FileOutputStream(file);
            try (ObjectOutputStream oos = new ObjectOutputStream(fos)) {
                oos.writeObject(model);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fos.close();
            } catch (IOException ex) {
                Logger.getLogger(NewWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }
}
    }
}
